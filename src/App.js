import React, { useState, useEffect, useRef } from 'react';
import './App.css';

const WS_URL = 'ws://localhost:3001';
const EMOJIS = ['üòÄ','üòÇ','üòç','üòé','üëç','üéâ','üî•','ü•≥','üò¢','üò°','ü§î','üôè','üí°','üöÄ','‚ù§Ô∏è'];

function getChatId(members) {
  return members.slice().sort().join('__');
}

function App() {
  const wsRef = useRef(null);
  const [isWsReady, setIsWsReady] = useState(false);
  const [wsError, setWsError] = useState(false);
  const [login, setLogin] = useState('');
  const [avatar, setAvatar] = useState('');
  const [user, setUser] = useState('');
  const [profile, setProfile] = useState({ name: '', avatar: '' });
  const [users, setUsers] = useState([]);
  const [chats, setChats] = useState([]);
  const [selectedChat, setSelectedChat] = useState(null);
  const [messages, setMessages] = useState({});
  const [input, setInput] = useState('');
  const [showProfile, setShowProfile] = useState(false);
  const [showGroupModal, setShowGroupModal] = useState(false);
  const [groupName, setGroupName] = useState('');
  const [groupAvatar, setGroupAvatar] = useState('');
  const [groupMembers, setGroupMembers] = useState([]);
  const [showEmojis, setShowEmojis] = useState(false);
  const [theme, setTheme] = useState(() => localStorage.getItem('theme') || 'dark');
  const [showUserCard, setShowUserCard] = useState(null); // {name, avatar}
  const [editGroupModal, setEditGroupModal] = useState(null); // null –∏–ª–∏ –æ–±—ä–µ–∫—Ç —á–∞—Ç–∞
  const [groupMenu, setGroupMenu] = useState({ open: false, anchor: null, chat: null }); // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–µ–Ω—é –≥—Ä—É–ø–ø—ã
  const messagesEndRef = useRef(null);

  // Connect WebSocket only once
  useEffect(() => {
    const socket = new window.WebSocket(WS_URL);
    wsRef.current = socket;

    socket.onopen = () => {
      setIsWsReady(true);
      setWsError(false);
    };

    socket.onerror = () => {
      setWsError(true);
      setIsWsReady(false);
    };

    socket.onclose = () => {
      setIsWsReady(false);
      setWsError(true);
    };

    socket.onmessage = (event) => {
      let data;
      try {
        data = JSON.parse(event.data);
      } catch {
        return;
      }
      if (data.type === 'login') {
        if (data.success) {
          setUser(data.user);
          setProfile(data.profile);
        } else {
          alert(data.reason || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');
        }
      }
      if (data.type === 'users') {
        setUsers(data.users);
      }
      if (data.type === 'allChats') {
        setChats(data.chats || []);
      }
      if (data.type === 'allMessages') {
        setMessages(data.messages || {});
      }
      if (data.type === 'message') {
        setMessages(prev => {
          const { chatId, msg } = data;
          const arr = prev[chatId] ? [...prev[chatId], msg] : [msg];
          return { ...prev, [chatId]: arr };
        });
      }
    };

    return () => socket.close();
  }, []);

  // Scroll to bottom on new message
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages, selectedChat]);

  // Logout on unload
  useEffect(() => {
    if (!wsRef.current || !user) return;
    const handleUnload = () => {
      try {
        wsRef.current.send(JSON.stringify({ type: 'logout' }));
      } catch {}
    };
    window.addEventListener('beforeunload', handleUnload);
    return () => window.removeEventListener('beforeunload', handleUnload);
  }, [user]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–≤—ã–π —á–∞—Ç –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞
  useEffect(() => {
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ —á–∞—Ç–æ–≤ ‚Äî –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –≤—ã–±–æ—Ä
    if (selectedChat && chats.find(c => c.id === selectedChat.id)) {
      return;
    }
    if (chats.length > 0) {
      setSelectedChat(chats[0]);
    }
  }, [chats]); // —É–±–∏—Ä–∞–µ–º selectedChat –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  // –õ–∏—á–Ω—ã–π —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  function getOrCreatePrivateChat(otherUser) {
    let chat = chats.find(
      c => !c.isGroup && c.members.includes(user) && c.members.includes(otherUser)
    );
    if (!chat) {
      const id = getChatId([user, otherUser]);
      chat = { id, name: otherUser, members: [user, otherUser], isGroup: false };
      setChats(prev => [...prev, chat]);
    }
    return chat;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏
  function getAvatar(name) {
    if (name === user) return profile.avatar;
    const u = users.find(u => u.name === name);
    return u && u.avatar ? u.avatar : '';
  }

  // –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–µ–º—É –≤ localStorage
  useEffect(() => {
    localStorage.setItem('theme', theme);
  }, [theme]);

  // –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (hooks –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ –ª—é–±—ã—Ö return!)
  const [isRecording, setIsRecording] = useState(false);
  const [mediaRecorder, setMediaRecorder] = useState(null);
  const [audioChunks, setAudioChunks] = useState([]);
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–¥–µ—Å—å, –∞ –Ω–µ –ø–æ—Å–ª–µ return!)
  const [showDeleteIdx, setShowDeleteIdx] = useState(null);
  const [showTranscribeIdx, setShowTranscribeIdx] = useState(null);
  const [transcriptions, setTranscriptions] = useState({}); // {chatId: {msgIdx: text}}

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  const startRecording = async () => {
    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
      alert('–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å –∞—É–¥–∏–æ');
      return;
    }
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      const recorder = new window.MediaRecorder(stream);

      // –°–±—Ä–æ—Å–∏—Ç—å audioChunks –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∑–∞–ø–∏—Å–∏
      let localChunks = [];
      recorder.ondataavailable = (e) => {
        if (e.data && e.data.size > 0) {
          localChunks.push(e.data);
        }
      };
      recorder.onstop = () => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤, –∞ –Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if (localChunks.length > 0) {
          const blob = new Blob(localChunks, { type: 'audio/webm' });
          sendVoiceMessage(blob);
        }
      };

      setMediaRecorder(recorder);
      setAudioChunks([]); // –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º
      recorder.start();
      setIsRecording(true);
    } catch (e) {
      alert('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏
  const stopRecording = () => {
    if (mediaRecorder && mediaRecorder.state === 'recording') {
      mediaRecorder.stop();
      setIsRecording(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  const sendVoiceMessage = (blob) => {
    if (!selectedChat || !wsRef.current || !isWsReady) return;
    const reader = new FileReader();
    reader.onload = () => {
      wsRef.current.send(
        JSON.stringify({
          type: 'voice',
          chatId: selectedChat.id,
          from: user,
          audio: reader.result, // base64
          time: Date.now(),
        })
      );
    };
    reader.readAsDataURL(blob);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  useEffect(() => {
    if (!wsRef.current) return;
    const socket = wsRef.current;
    const oldOnMessage = socket.onmessage;
    socket.onmessage = (event) => {
      let data;
      try {
        data = JSON.parse(event.data);
      } catch {
        if (oldOnMessage) oldOnMessage(event);
        return;
      }
      if (data.type === 'voice') {
        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏—Å—ã–ª–∞–µ—Ç {type: 'voice', chatId, msg}, –∏—Å–ø–æ–ª—å–∑—É–µ–º msg
        // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏—Å—ã–ª–∞–µ—Ç {type: 'voice', chatId, from, audio, ...}, —Å–æ–±–∏—Ä–∞–µ–º msg –≤—Ä—É—á–Ω—É—é
        let msg;
        if (data.msg) {
          msg = data.msg;
        } else {
          msg = {
            from: data.from,
            audio: data.audio,
            time: data.time || Date.now(),
            // –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—è, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –∏—Ö –ø—Ä–∏—Å—ã–ª–∞–µ—Ç
          };
        }
        setMessages((prev) => {
          const arr = prev[data.chatId] ? [...prev[data.chatId], msg] : [msg];
          return { ...prev, [data.chatId]: arr };
        });
        return;
      }
      // –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
      if (data.type === 'deleteMessage') {
        setMessages((prev) => {
          const msgs = prev[data.chatId] || [];
          if (typeof data.msgIdx !== 'number') return prev;
          const msg = msgs[data.msgIdx];
          // –£–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          if (!msg || msg.from !== data.user) return prev;
          const newMsgs = [...msgs];
          newMsgs.splice(data.msgIdx, 1);
          return { ...prev, [data.chatId]: newMsgs };
        });
        return;
      }
      if (oldOnMessage) oldOnMessage(event);
    };
    return () => {
      socket.onmessage = oldOnMessage;
    };
    // eslint-disable-next-line
  }, [wsRef.current]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  const transcribeVoice = async (msg, idx) => {
    setTranscriptions(prev => ({
      ...prev,
      [selectedChat.id]: { ...(prev[selectedChat.id] || {}), [idx]: '‚è≥ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞...' }
    }));
    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –∏ "—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"
    setTimeout(() => {
      setTranscriptions(prev => ({
        ...prev,
        [selectedChat.id]: {
          ...(prev[selectedChat.id] || {}),
          [idx]: '–¢–µ–∫—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä)'
        }
      }));
    }, 1500);
  };

  if (wsError) {
    return (
      <div className="LoginScreen">
        <div className="LoginBox">
          <h2>–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º</h2>
          <div style={{ color: '#888', marginTop: 8, fontSize: 15 }}>
            –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ <b>{WS_URL}</b>
          </div>
        </div>
      </div>
    );
  }

  if (!user) {
    return (
      <div className="LoginScreen">
        <div className="LoginBox">
          <h2>–í—Ö–æ–¥ –≤ —á–∞—Ç</h2>
          <input
            className="ChatInput"
            placeholder="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            value={login}
            onChange={e => setLogin(e.target.value)}
            onKeyDown={e => {
              if (e.key === 'Enter' && wsRef.current && isWsReady) {
                wsRef.current.send(JSON.stringify({ type: 'login', user: login.trim(), avatar: avatar.trim() }));
              }
            }}
            autoFocus
            disabled={!isWsReady}
          />
          <input
            className="ChatInput"
            placeholder="–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤–∞—Ç–∞—Ä (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
            value={avatar}
            onChange={e => setAvatar(e.target.value)}
            style={{ marginTop: 8 }}
            disabled={!isWsReady}
          />
          <button
            className="ChatSendBtn"
            onClick={() => {
              if (wsRef.current && isWsReady) wsRef.current.send(JSON.stringify({ type: 'login', user: login.trim(), avatar: avatar.trim() }));
            }}
            disabled={!isWsReady}
          >
            –í–æ–π—Ç–∏
          </button>
          <div style={{ color: '#888', marginTop: 8, fontSize: 13 }}>
            –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏ –Ω–µ –ø—É—Å—Ç—ã–º
          </div>
          {!isWsReady && (
            <div style={{ color: '#e57373', marginTop: 8, fontSize: 13 }}>
              –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º...
            </div>
          )}
        </div>
      </div>
    );
  }

  // –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤, –≥–¥–µ —Å–æ—Å—Ç–æ–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  const myChats = chats.filter(c => c.members.includes(user));
  // –°–ø–∏—Å–æ–∫ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞)
  const otherUsers = users.filter(u => u.name !== user);

  // –ï–¥–∏–Ω—ã–π —Å–ø–∏—Å–æ–∫: –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã + –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∫—Ä–æ–º–µ —Å–µ–±—è), –∞ –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã ‚Äî –æ—Ç–¥–µ–ª—å–Ω–æ —Å–≤–µ—Ä—Ö—É
  const unifiedList = [
    ...myChats.filter(c => c.isGroup),
    ...users.filter(u => u.name !== user)
  ];

  // –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
  const chatMessages = selectedChat && messages[selectedChat.id] ? messages[selectedChat.id] : [];

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  const sendMessage = () => {
    if (!input.trim() || !selectedChat || !wsRef.current || !isWsReady) return;
    wsRef.current.send(JSON.stringify({
      type: 'message',
      chatId: selectedChat.id,
      from: user,
      text: input,
    }));
    setInput('');
    setShowEmojis(false);
  };

  // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
  const saveProfile = () => {
    if (wsRef.current && isWsReady) {
      wsRef.current.send(JSON.stringify({ type: 'updateProfile', name: profile.name, avatar: profile.avatar }));
      setShowProfile(false);
    }
  };

  // –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
  const createGroup = () => {
    if (!groupName.trim() || groupMembers.length < 2) return;
    if (wsRef.current && isWsReady) {
      wsRef.current.send(JSON.stringify({
        type: 'createGroup',
        name: groupName,
        members: [user, ...groupMembers],
        avatar: groupAvatar,
      }));
      setShowGroupModal(false);
      setGroupName('');
      setGroupAvatar('');
      setGroupMembers([]);
    }
  };

  // –í—Å—Ç–∞–≤–∏—Ç—å —Å–º–∞–π–ª–∏–∫
  const insertEmoji = emoji => setInput(input + emoji);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å
  const handleAvatarUpload = (e) => {
    const file = e.target.files[0];
    if (!file) return;
    const reader = new FileReader();
    reader.onload = (ev) => {
      setProfile((p) => ({ ...p, avatar: ev.target.result }));
    };
    reader.readAsDataURL(file);
  };

  // –ü—Ä–∏ –≤–≤–æ–¥–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞–≤–∞—Ç–∞—Ä –æ—á–∏—â–∞—Ç—å —Ñ–∞–π–ª (–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç)
  const handleAvatarUrlChange = (e) => {
    setProfile((p) => ({ ...p, avatar: e.target.value }));
  };

  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
  const avatarFallback = "https://ui-avatars.com/api/?background=random&name=";

  // –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const handleUserClick = (u) => {
    setShowUserCard(u);
  };

  // –ü–µ—Ä–µ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏
  const handleMessageUser = (u) => {
    setSelectedChat(getOrCreatePrivateChat(u.name));
    setShowUserCard(null);
  };

  // –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
  const openEditGroup = (groupChat) => {
    setEditGroupModal({
      id: groupChat.id,
      name: groupChat.name,
      avatar: groupChat.avatar || '',
      members: groupChat.members.filter(n => n !== user), // –∫—Ä–æ–º–µ —Å–µ–±—è
      origMembers: groupChat.members.slice(),
    });
  };

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
  const saveEditGroup = () => {
    if (!editGroupModal) return;
    if (!editGroupModal.name.trim() || editGroupModal.members.length < 1) return;
    if (wsRef.current && isWsReady) {
      wsRef.current.send(JSON.stringify({
        type: 'editGroup',
        id: editGroupModal.id,
        name: editGroupModal.name,
        avatar: editGroupModal.avatar,
        members: [user, ...editGroupModal.members], // –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–µ–º —Å–µ–±—è
      }));
      setEditGroupModal(null);
    }
  };

  // –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –≥—Ä—É–ø–ø—ã
  const openGroupMenu = (e, chat) => {
    e.stopPropagation();
    setGroupMenu({ open: true, anchor: { x: e.clientX, y: e.clientY }, chat });
  };

  // –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –≥—Ä—É–ø–ø—ã –≤ ChatHeader
  const openGroupMenuHeader = (e, chat) => {
    e.stopPropagation();
    setGroupMenu({ open: true, anchor: { x: e.clientX, y: e.clientY }, chat });
  };

  // –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –∏–∑ –º–µ–Ω—é
  const handleEditGroup = () => {
    const groupChat = groupMenu.chat;
    setEditGroupModal({
      id: groupChat.id,
      name: groupChat.name,
      avatar: groupChat.avatar || '',
      members: groupChat.members.filter(n => n !== user), // –∫—Ä–æ–º–µ —Å–µ–±—è
      origMembers: groupChat.members.slice(),
    });
    setGroupMenu({ open: false, anchor: null, chat: null });
  };

  // –î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
  const deleteMessage = (msgIdx) => {
    if (!selectedChat || !wsRef.current || !isWsReady) return;
    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥—É —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç)
    wsRef.current.send(
      JSON.stringify({
        type: 'deleteMessage',
        chatId: selectedChat.id,
        msgIdx,
        user,
      })
    );
    // –õ–æ–∫–∞–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    setMessages(prev => {
      const chatMsgs = prev[selectedChat.id] || [];
      const msg = chatMsgs[msgIdx];
      if (!msg || msg.from !== user) return prev;
      const newMsgs = [...chatMsgs];
      newMsgs.splice(msgIdx, 1);
      return { ...prev, [selectedChat.id]: newMsgs };
    });
  };

  return (
    <div className={`ChatLayout ${theme === 'dark' ? 'theme-dark' : 'theme-light'}`}>
      <div className="UsersPanel">
        <div className="UsersHeader">
          –ß–∞—Ç—ã
          <button className="ChatSendBtn" style={{ marginLeft: 8, padding: '2px 8px', fontSize: 14 }}
            onClick={() => setShowGroupModal(true)}
          >+</button>
          <button className="ChatSendBtn" style={{ marginLeft: 8, padding: '2px 8px', fontSize: 14 }}
            onClick={() => setShowProfile(true)}
          >–ü—Ä–æ—Ñ–∏–ª—å</button>
          <button
            className="ChatSendBtn"
            style={{ marginLeft: 8, padding: '2px 8px', fontSize: 14 }}
            onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
            title={theme === 'dark' ? '–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞' : '–¢—ë–º–Ω–∞—è —Ç–µ–º–∞'}
          >
            {theme === 'dark' ? 'üåû' : 'üåô'}
          </button>
        </div>
        <div className="UsersList">
          {unifiedList.length === 0 && (
            <div className="UserItem user-empty">–ù–µ—Ç —á–∞—Ç–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
          )}
          {unifiedList.map(item => {
            if (item.isGroup) {
              // –ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
              return (
                <div
                  key={item.id}
                  className={`UserItem${selectedChat && selectedChat.id === item.id ? ' selected' : ''}`}
                  onClick={() => setSelectedChat(item)}
                  style={{ position: 'relative' }}
                >
                  {/* –¢–æ–ª—å–∫–æ –∞–≤–∞—Ç–∞—Ä –∏ –∏–º—è, –±–µ–∑ –º–µ–Ω—é */}
                  {item.avatar && <img src={item.avatar} alt="" style={{ width: 24, height: 24, borderRadius: '50%', marginRight: 8 }} />}
                  {item.name}
                  <span style={{ color: '#bbb', fontSize: 12, marginLeft: 6 }}>üë•</span>
                </div>
              );
            } else {
              // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ª–∏—á–Ω—ã–π —á–∞—Ç)
              return (
                <div
                  key={item.name}
                  className={`UserItem${selectedChat && !selectedChat.isGroup && selectedChat.members && selectedChat.members.includes(item.name) ? ' selected' : ''}`}
                  onClick={() => setSelectedChat(getOrCreatePrivateChat(item.name))}
                >
                  {item.avatar && <img src={item.avatar} alt="" style={{ width: 20, height: 20, borderRadius: '50%', marginRight: 8 }} />}
                  <span className="UserNameLink" style={{ cursor: 'pointer', textDecoration: 'underline', color: 'inherit' }}>
                    {item.name}
                  </span>
                </div>
              );
            }
          })}
        </div>
        <div className="CurrentUser">
          {profile.avatar && <img src={profile.avatar} alt="" style={{ width: 24, height: 24, borderRadius: '50%', marginRight: 8 }} />}
          –í—ã: <b>{user}</b>
        </div>
      </div>
      <div className="ChatPanel">
        <div className="ChatHeader">
          {selectedChat
            ? (selectedChat.isGroup
                ? (
                  <span
                    style={{ display: 'flex', alignItems: 'center', cursor: 'pointer' }}
                    onClick={e => openGroupMenuHeader(e, selectedChat)}
                  >
                    {selectedChat.avatar && <img src={selectedChat.avatar} alt="" style={{ width: 28, height: 28, borderRadius: '50%', marginRight: 8 }} />}
                    {selectedChat.name}
                    <span style={{ color: '#bbb', fontSize: 13, marginLeft: 8 }}>({selectedChat.members.length} —á–µ–ª.)</span>
                  </span>
                )
                : selectedChat.members.find(n => n !== user))
            : '–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç'}
        </div>
        <div className="ChatMessages">
          {selectedChat ? (
            chatMessages.length === 0 ? (
              <div className="ChatMessage system">–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π</div>
            ) : (
              chatMessages.map((msg, idx) => (
                <div
                  key={idx}
                  className={`ChatMessage ${msg.from === user ? 'me' : 'other'}`}
                  onClick={() => {
                    if (msg.from === user) setShowDeleteIdx(idx);
                    else setShowDeleteIdx(null);
                    // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º
                    if ('audio' in msg) setShowTranscribeIdx(idx);
                    else setShowTranscribeIdx(null);
                  }}
                  onMouseLeave={() => {
                    if (showDeleteIdx === idx) setShowDeleteIdx(null);
                    if (showTranscribeIdx === idx) setShowTranscribeIdx(null);
                  }}
                  style={{ position: 'relative', cursor: msg.from === user || 'audio' in msg ? 'pointer' : undefined }}
                >
                  {/* –ê–≤–∞—Ç–∞—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è */}
                  {getAvatar(msg.from) && (getAvatar(msg.from).startsWith('data:') || getAvatar(msg.from).trim().startsWith('http')) && (
                    <img
                      src={getAvatar(msg.from).trim()}
                      alt=""
                      className="MsgAvatar"
                      onError={e => { e.target.onerror = null; e.target.src = avatarFallback + encodeURIComponent(msg.from); }}
                    />
                  )}
                  {/* –ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: –≤ –≥—Ä—É–ø–ø–∞—Ö ‚Äî —Å—Å—ã–ª–∫–∞, –≤ –ª–∏—á–Ω—ã—Ö ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç */}
                  {selectedChat.isGroup ? (
                    <span
                      className="ChatAuthor UserNameLink"
                      style={{ cursor: 'pointer', textDecoration: 'underline', color: 'inherit' }}
                      onClick={() => {
                        if (msg.from !== user) {
                          const u = users.find(u => u.name === msg.from);
                          if (u) setShowUserCard(u);
                        }
                      }}
                    >
                      {msg.from === user ? '–í—ã' : msg.from}:
                    </span>
                  ) : (
                    <span className="ChatAuthor">
                      {msg.from === user ? '–í—ã' : msg.from}:
                    </span>
                  )}
                  {msg.text}
                  {'audio' in msg && (
                    <>
                      <audio controls src={msg.audio} style={{ verticalAlign: 'middle', marginLeft: 8, maxWidth: 180 }} />
                      {/* –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö, —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ */}
                      {showTranscribeIdx === idx && (
                        <button
                          className="ChatSendBtn"
                          style={{
                            marginLeft: 8,
                            padding: 0,
                            width: 34,
                            height: 34,
                            minWidth: 34,
                            minHeight: 34,
                            borderRadius: '50%',
                            background: '#90caf9',
                            color: '#1976d2',
                            position: 'absolute',
                            right: 54,
                            bottom: 10,
                            zIndex: 2,
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            fontSize: 20,
                            boxShadow: '0 2px 8px #90caf944'
                          }}
                          title="–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ"
                          onClick={e => {
                            e.stopPropagation();
                            transcribeVoice(msg, idx);
                          }}
                          disabled={!!(transcriptions[selectedChat.id] && transcriptions[selectedChat.id][idx])}
                        >
                          <span role="img" aria-label="transcribe">üó£Ô∏è</span>
                        </button>
                      )}
                      {/* –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ */}
                      {transcriptions[selectedChat.id] && transcriptions[selectedChat.id][idx] && (
                        <div style={{
                          marginTop: 8,
                          background: '#f8fafd',
                          color: '#1976d2',
                          borderRadius: 8,
                          padding: '6px 12px',
                          fontSize: '1em',
                          maxWidth: 320,
                          wordBreak: 'break-word'
                        }}>
                          {transcriptions[selectedChat.id][idx]}
                        </div>
                      )}
                    </>
                  )}
                  {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∫–ª–∏–∫–µ */}
                  {msg.from === user && showDeleteIdx === idx && (
                    <button
                      className="ChatSendBtn"
                      style={{
                        marginLeft: 8,
                        padding: '2px 10px',
                        fontSize: 13,
                        background: '#e57373',
                        color: '#fff',
                        position: 'absolute',
                        right: 10,
                        bottom: 10,
                        zIndex: 2,
                      }}
                      title="–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
                      onClick={e => {
                        e.stopPropagation();
                        deleteMessage(idx);
                        setShowDeleteIdx(null);
                      }}
                    >
                      üóëÔ∏è
                    </button>
                  )}
                  <span className="ChatTime">
                    {msg.time
                      ? new Date(msg.time).toLocaleTimeString().slice(0, 5)
                      : ''}
                  </span>
                </div>
              ))
            )
          ) : (
            <div className="ChatMessage system">
              –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç
            </div>
          )}
          <div ref={messagesEndRef} />
        </div>
        <div className="ChatInputBar">
          {/* –°–º–∞–π–ª–∏–∫–∏ —Å–ª–µ–≤–∞ */}
          <button
            className="ChatSendBtn"
            style={{
              marginRight: 4,
              fontSize: 18,
              padding: '0 8px',
            }}
            onClick={() => setShowEmojis(e => !e)}
            tabIndex={-1}
          >üòä</button>
          {showEmojis && (
            <div className="EmojiPanel">
              {EMOJIS.map(e => (
                <span key={e} className="EmojiBtn" onClick={() => insertEmoji(e)}>{e}</span>
              ))}
            </div>
          )}
          <input
            className="ChatInput"
            type="text"
            value={input}
            onChange={e => setInput(e.target.value)}
            onKeyDown={e => {
              if (e.key === 'Enter') sendMessage();
            }}
            placeholder={
              selectedChat ? '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...' : '–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç...'
            }
            disabled={!selectedChat}
          />
          {/* –ö–Ω–æ–ø–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ —Ç–µ–ø–µ—Ä—å —Å–ø—Ä–∞–≤–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π */}
          <button
            className="ChatSendBtn"
            style={{
              marginRight: 4,
              fontSize: 18,
              padding: '0 8px',
              background: isRecording ? '#e57373' : undefined,
              color: isRecording ? '#fff' : undefined,
            }}
            onClick={() => {
              if (!isRecording) startRecording();
              else stopRecording();
            }}
            title={isRecording ? '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å' : '–ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'}
            tabIndex={-1}
          >
            {isRecording ? '‚èπÔ∏è' : 'üé§'}
          </button>
          <button
            className="ChatSendBtn"
            onClick={sendMessage}
            disabled={!selectedChat || !input.trim()}
          >
            –û—Ç–ø—Ä–∞–≤–∏—Ç—å
          </button>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ—Ñ–∏–ª—è */}
      {showProfile && (
        <div className="ModalOverlay" onClick={() => setShowProfile(false)}>
          <div className="ModalBox" onClick={e => e.stopPropagation()}>
            <h3>–ü—Ä–æ—Ñ–∏–ª—å</h3>
            <input
              className="ChatInput"
              value={profile.name}
              onChange={e => setProfile(p => ({ ...p, name: e.target.value }))}
              disabled
              style={{ marginBottom: 8 }}
            />
            <input
              className="ChatInput"
              placeholder="–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤–∞—Ç–∞—Ä"
              value={profile.avatar}
              onChange={handleAvatarUrlChange}
              style={{ marginBottom: 8 }}
            />
            <label className="AvatarUploadBtn">
              <input
                type="file"
                accept="image/*"
                style={{ display: 'none' }}
                onChange={handleAvatarUpload}
              />
              –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä
            </label>
            {/* –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ base64 –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http */}
            {profile.avatar && (profile.avatar.startsWith('data:') || profile.avatar.trim().startsWith('http')) && (
              <img
                src={profile.avatar.trim()}
                alt=""
                style={{ width: 64, height: 64, borderRadius: '50%', margin: '12px 0' }}
                onError={e => { e.target.onerror = null; e.target.src = avatarFallback + encodeURIComponent(profile.name || user); }}
              />
            )}
            <button className="ChatSendBtn" onClick={saveProfile}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã */}
      {showGroupModal && (
        <div className="ModalOverlay" onClick={() => setShowGroupModal(false)}>
          <div className="ModalBox" onClick={e => e.stopPropagation()}>
            <h3>–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç</h3>
            <input
              className="ChatInput"
              placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã"
              value={groupName}
              onChange={e => setGroupName(e.target.value)}
              style={{ marginBottom: 8 }}
            />
            <input
              className="ChatInput"
              placeholder="–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤–∞—Ç–∞—Ä –≥—Ä—É–ø–ø—ã (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
              value={groupAvatar}
              onChange={e => setGroupAvatar(e.target.value)}
              style={{ marginBottom: 8 }}
            />
            <div style={{ marginBottom: 8 }}>
              <div style={{ marginBottom: 4 }}>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</div>
              {otherUsers.map(u => (
                <label key={u.name} style={{ display: 'block', fontSize: 14 }}>
                  <input
                    type="checkbox"
                    checked={groupMembers.includes(u.name)}
                    onChange={e => {
                      setGroupMembers(members =>
                        e.target.checked
                          ? [...members, u.name]
                          : members.filter(n => n !== u.name)
                      );
                    }}
                  />{' '}
                  {u.avatar && <img src={u.avatar} alt="" style={{ width: 18, height: 18, borderRadius: '50%', marginRight: 4 }} />}
                  {u.name}
                </label>
              ))}
            </div>
            <button className="ChatSendBtn" onClick={createGroup} disabled={!groupName.trim() || groupMembers.length < 2}>
              –°–æ–∑–¥–∞—Ç—å
            </button>
          </div>
        </div>
      )}

      {/* –ú–µ–Ω—é –≥—Ä—É–ø–ø—ã (—Ç–µ–ø–µ—Ä—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑ ChatHeader) */}
      {groupMenu.open && (
        <div
          style={{
            position: 'fixed',
            left: groupMenu.anchor.x,
            top: groupMenu.anchor.y,
            zIndex: 2000,
            background: theme === 'dark' ? '#23272f' : '#fff',
            border: '1px solid #e3e6ea',
            borderRadius: 10,
            boxShadow: '0 2px 12px rgba(0,0,0,0.12)',
            minWidth: 180,
            padding: 0
          }}
          onClick={e => e.stopPropagation()}
        >
          <button
            className="ChatSendBtn"
            style={{
              width: '100%',
              borderRadius: 0,
              background: 'none',
              color: theme === 'dark' ? '#90caf9' : '#1976d2',
              border: 'none',
              textAlign: 'left',
              padding: '12px 18px',
              fontWeight: 500,
              fontSize: 15,
              cursor: 'pointer'
            }}
            onClick={handleEditGroup}
          >
            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É
          </button>
          <button
            className="ChatSendBtn"
            style={{
              width: '100%',
              borderRadius: 0,
              background: 'none',
              color: '#888',
              border: 'none',
              textAlign: 'left',
              padding: '12px 18px',
              fontWeight: 400,
              fontSize: 15,
              cursor: 'pointer'
            }}
            onClick={() => setGroupMenu({ open: false, anchor: null, chat: null })}
          >
            –ó–∞–∫—Ä—ã—Ç—å
          </button>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã */}
      {editGroupModal && (
        <div className="ModalOverlay" onClick={() => setEditGroupModal(null)}>
          <div className="ModalBox" onClick={e => e.stopPropagation()}>
            <h3>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É</h3>
            <input
              className="ChatInput"
              placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã"
              value={editGroupModal.name}
              onChange={e => setEditGroupModal(modal => ({ ...modal, name: e.target.value }))}
              style={{ marginBottom: 8 }}
            />
            <input
              className="ChatInput"
              placeholder="–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤–∞—Ç–∞—Ä –≥—Ä—É–ø–ø—ã (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
              value={editGroupModal.avatar}
              onChange={e => setEditGroupModal(modal => ({ ...modal, avatar: e.target.value }))}
              style={{ marginBottom: 8 }}
            />
            <div style={{ marginBottom: 8 }}>
              <div style={{ marginBottom: 4 }}>–£—á–∞—Å—Ç–Ω–∏–∫–∏ (–∫—Ä–æ–º–µ –≤–∞—Å):</div>
              {users.filter(u => u.name !== user).map(u => (
                <label key={u.name} style={{ display: 'block', fontSize: 14 }}>
                  <input
                    type="checkbox"
                    checked={editGroupModal.members.includes(u.name)}
                    onChange={e => {
                      setEditGroupModal(modal => ({
                        ...modal,
                        members: e.target.checked
                          ? [...modal.members, u.name]
                          : modal.members.filter(n => n !== u.name)
                      }));
                    }}
                  />{' '}
                  {u.avatar && <img src={u.avatar} alt="" style={{ width: 18, height: 18, borderRadius: '50%', marginRight: 4 }} />}
                  {u.name}
                </label>
              ))}
            </div>
            <button
              className="ChatSendBtn"
              onClick={saveEditGroup}
              disabled={!editGroupModal.name.trim() || editGroupModal.members.length < 1}
            >
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            </button>
            <button
              className="ChatSendBtn"
              style={{ marginTop: 8, background: '#eee', color: '#222' }}
              onClick={() => setEditGroupModal(null)}
            >
              –û—Ç–º–µ–Ω–∞
            </button>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –¥–ª—è UsersList */}
      {showUserCard && (
        <div className="ModalOverlay" onClick={() => setShowUserCard(null)}>
          <div className="ModalBox UserCardBox" onClick={e => e.stopPropagation()}>
            {showUserCard.avatar && (showUserCard.avatar.startsWith('data:') || showUserCard.avatar.trim().startsWith('http')) && (
              <img src={showUserCard.avatar.trim()} alt="" style={{ width: 72, height: 72, borderRadius: '50%', marginBottom: 12 }} onError={e => { e.target.onerror = null; e.target.src = avatarFallback + encodeURIComponent(showUserCard.name); }} />
            )}
            <div style={{ fontWeight: 600, fontSize: 20, marginBottom: 8 }}>{showUserCard.name}</div>
            <button
              className="ChatSendBtn"
              onClick={() => { setSelectedChat(getOrCreatePrivateChat(showUserCard.name)); setShowUserCard(null); }}
              style={{ marginTop: 8 }}
            >
              –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            </button>
          </div>
        </div>
      )}
    </div>
  );
}

export default App;
